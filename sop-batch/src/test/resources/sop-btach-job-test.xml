<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<bean id="endpoints" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <list>
	        	<value>database.properties</value>
	        </list>
	    </property>
	</bean>

	<bean id="myProps"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">

		<property name="location" value="database.properties" />

	</bean>

	
	
	<batch:job id="flatFileReadingJob">
		<batch:step id="categoryReadingStep">
			<batch:tasklet>
				<batch:chunk reader="reader1" writer="writer1" commit-interval="10"/>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="productReadingStep"/>
		</batch:step>
		
		<batch:step id="productReadingStep">
			<batch:tasklet>
				<batch:chunk reader="reader2" writer="writer2" commit-interval="10"/>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="discountReadingStep"/>
		</batch:step>
		
		<batch:step id="discountReadingStep">
			<batch:tasklet>
				<batch:chunk reader="reader3" writer="writer3" commit-interval="10"/>
			</batch:tasklet>
			<!-- <batch:next on="COMPLETED" to="customerRolesReadingStep"/> -->
		</batch:step>
		
		<!-- <batch:step id="customerRolesReadingStep">
			<batch:tasklet>
				<batch:chunk reader="reader4" writer="writer4" commit-interval="10"/>
			</batch:tasklet>
		</batch:step> -->
		
	</batch:job>
	
	
	
	<bean id="reader1" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="catId,name,description" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.emc.sqlfire.sop.batch.CategoryFieldSetMapper" />
				</property>
			</bean>
		</property>
		<property name="resource" value="classpath:category.csv" />
	</bean>
	
	<bean id="writer1" class="com.emc.sqlfire.sop.batch.JdbcCategoryItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="reader2" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="productId,catId,unitCost,name,description" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.emc.sqlfire.sop.batch.ProductFieldSetMapper" />
				</property>
			</bean>
		</property>
		<property name="resource" value="classpath:product.csv" />
	</bean>
	
	<bean id="writer2" class="com.emc.sqlfire.sop.batch.JdbcProductItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="reader3" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="discId,custType,discountType,discountPercent" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.emc.sqlfire.sop.batch.DiscountsFieldSetMapper" />
				</property>
			</bean>
		</property>
		<property name="resource" value="classpath:discounts.csv" />
	</bean>
	
	<bean id="writer3" class="com.emc.sqlfire.sop.batch.JdbcDiscountsItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="reader4" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="linesToSkip" value="1"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="roleId,roleDesc,roleName" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.emc.sqlfire.sop.batch.CustomerRolesFieldSetMapper" />
				</property>
			</bean>
		</property>
		<property name="resource" value="classpath:customerRoles.csv" />
	</bean>
	
	<bean id="writer4" class="com.emc.sqlfire.sop.batch.JdbcCustomerRolesItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<!-- <property name="username" value="root" />
		<property name="password" value="admin" /> -->
	</bean>
	

	<!-- <jdbc:embedded-database type="H2" id="dataSource">
		<jdbc:script location="classpath:/create-tables.sql" />
	</jdbc:embedded-database> -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	<bean class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
